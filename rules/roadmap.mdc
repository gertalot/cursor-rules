---
description: 
globs: 
alwaysApply: false
---
# Instructions for Generating a Roadmap from an Architecture & Design Document

You are a large language model tasked with generating a detailed, actionable product roadmap from a provided
architecture and design document. Follow these instructions precisely to ensure the roadmap is practical, value-driven,
and structured for iterative delivery.

---

## 1. Analyze the Architecture & Design Document

- **Read the entire document carefully.**
- Identify the core product goals, user needs, and any explicit or implicit requirements.
- Note the technology stack, major components, and any constraints or guiding principles.
- Pay attention to referenced diagrams, screenshots, data models, and user flows.

---

## 2. Identify Vertical Slices of Functionality

- Break down the product into small, independent, and valuable increments ("vertical slices").
- Each increment should deliver a potentially shippable product, even if minimal.
- Avoid grouping work by technical layers (e.g., "build the backend", "then the frontend").
- Instead, focus on end-to-end features that provide user value and can be tested and reviewed.

---

## 3. Prioritize by Value and Dependency

- Order roadmap items so that the highest-value, most foundational features are delivered first.
- Each increment should enable real user feedback and inform subsequent work.
- Do not propose features that are not yet needed or whose value is unproven.
- Avoid waterfall-style sequencing; prefer iterative, feedback-driven development.

---

## 4. Define Each Roadmap Item Clearly

For each roadmap item:

- **Outcome:** State the user-facing result or value delivered.
- **Increment:** List the specific changes or additions required across all relevant layers (DB, backend, frontend,
  etc.) to deliver the outcome.
- **Quality:** Specify requirements for tests, documentation, and code review.
- **Feedback:** Describe how user feedback will be gathered and used.

Each item should be:

- Small enough to be delivered and reviewed independently.
- Actionable and unambiguous.
- Not dependent on the completion of unrelated future work.

---

## 5. Structure the Roadmap

- Group roadmap items into logical phases (e.g., "Now", "Next", "Later") based on priority and dependencies.
- Within each phase, order items to maximize early value and learning.
- Ensure each phase delivers working, testable software.

---

## 6. Maintain a Living Document

- State that the roadmap is iterative and should be updated as feedback is gathered and priorities evolve.
- Encourage regular review and adaptation.

---

## 7. Output Format

- Use clear markdown formatting.
- For each item, use the following structure:

  ```
  ### [Item Number]. [Feature Name]

  - **Outcome:** [Describe the user-facing value]
  - **Increment:**
    - [List the technical steps, e.g., DB changes, backend endpoints, frontend pages]
  - **Quality:** [Tests, docs, code review]
  - **Feedback:** [How feedback will be gathered]
  ```

- Group items under headings such as "Now", "Next", "Later" to indicate priority.

---

## 8. Example Reference

- Review the provided example architecture and roadmap documents.
- Your output should be structured and detailed such that, given the example architecture, your instructions would
  enable a model to produce a roadmap similar to the example.

---

## 9. Constraints

- Do **not** propose features or work that is not justified by the architecture or requirements.
- Do **not** create large, monolithic, or waterfall-style items.
- Do **not** output anything except the roadmap in the specified markdown format.

---

*Follow these instructions exactly to produce a high-quality, actionable, and value-driven roadmap from any architecture
and design document.*