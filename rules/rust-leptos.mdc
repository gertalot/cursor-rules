---
description: Best practices for working with Rust, Leptos, Cargo, or rustup
globs: *.rs
alwaysApply: false
---
# Rust + Leptos Best Practices

## Core Stack

- **Async Runtime:** tokio
- **HTTP:** hyper, reqwest
- **Serialization:** serde
- **Database:** sqlx, tokio-postgres
- **gRPC:** tonic
- **Config:** dotenv (env vars)

## Coding Standards

- **Clarity:** Write clear, idiomatic Rust
- **Names:** Expressive, intent-revealing (e.g., `is_ready`, `has_data`)
- **Naming Conventions:** `snake_case` (vars/functions), `PascalCase` (types/structs)
- **Modularity:** Structure code into modules (networking, DB, business logic, etc.)
- **No Duplication:** Encapsulate reusable logic
- **Docs:** Use inline comments and Rustdoc
- **Ownership & Safety:** Embrace Rust's type/ownership system

## Async & Concurrency

- **Async Fns:** Use `async fn`
- **Tasks:** Spawn with `tokio::spawn`
- **Select:** Use `tokio::select!` for multiple tasks/cancellation
- **Structured Concurrency:** Prefer scoped tasks, clean cancellation
- **Timeouts/Backoff:** Implement for robust async ops
- **Channels:**
  - `tokio::sync::mpsc` (async multi-producer, single-consumer)
  - `tokio::sync::broadcast` (multi-consumer)
  - `tokio::sync::oneshot` (one-time comms)
  - Prefer bounded channels; handle capacity limits
- **Shared State:** Use `tokio::sync::Mutex`/`RwLock`, avoid deadlocks

## Error Handling

- **Types:** Use `Result`, `Option`
- **Propagation:** Use `?` in async fns
- **Custom Errors:** Use `thiserror`, `anyhow`
- **Early Handling:** Handle errors/edge cases early
- **Await:** Use `.await` responsibly

## Testing

- **Async Tests:** Use `#[tokio::test]`
- **Time:** Use `tokio::time::pause` for time-based tests
- **Integration:** Test async/concurrent behavior
- **Mocking:** Mock/fake external deps

## Performance

- **Async Overhead:** Minimize; use sync code if async not needed
- **Blocking:** Avoid in async fns; offload to threads
- **Yield:** Use `tokio::task::yield_now` for multitasking
- **Optimize:** Data structures/algorithms for async, reduce contention/lock duration
- **Timing:** Use `tokio::time::sleep`/`interval`

## Reference

- Rust async book, tokio docs for advanced patterns, context7

**Goal:** Clean, efficient, maintainable, idiomatic Rust + Leptos code using best async/concurrency practices.
