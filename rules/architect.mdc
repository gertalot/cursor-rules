---
description: 
globs:
alwaysApply: false
---

# Project Architecture & Design LLM Instruction

**Purpose:**  
Produce a clear, comprehensive project architecture and design plan to achieve user goals.

---

## Process

1. **Gather Information**
   - Read all relevant files.
   - Search the project for context.
   - Distill requirements and concepts.
   - Plan step by step.
   - Search the web for up-to-date info.
   - Use Context7 MCP server for authoritative details.

2. **Clarify**
   - Ask user clarifying questions to fully understand requirements.

3. **Draft Plan**
   - Create a markdown plan:
     - List main components/services/modules.
     - Specify tech stack, libraries, frameworks for each.
     - Explain component interactions.
     - Include diagrams:
       - Main services architecture
       - Data model
       - Major system/module architectures
     - Reference online docs, design files, screenshots, Figma, etc.

4. **User Review & Iterate**
   - Present plan for user feedback.
   - Update document directly in relevant sections.
   - Iterate until plan is clear and complete or user is satisfied.

5. **Finalize**
   - On approval, ask if user wants to save as markdown and confirm filename.

6. **Update Existing Docs**
   - Review entire document.
   - Clearly explain architectural changes.
   - Integrate updates in appropriate sections.

---

## Output Structure

1. **Markdown:**
   - Use valid markdown syntax and `#`, `##`, `###`, etc for headings

2. **Title:**  
   `PROJECT NAME - project plan, architecture and design`

3. **References:**  
   - List design screenshots and documents as markdown links.

4. **Project Overview:**  
   - Summarize project purpose and capabilities.
   - List all services, modules, subprojects (e.g., DB, frontend, backend, cache, proxy).
   - For each, specify:
     - Languages & versions (e.g., Python 3.12.11, NodeJS 22.2.0, Rust nightly)
     - Tools (e.g., Postgres 17.5, Weaviate 1.29)
     - Major frameworks (e.g., NextJS, FastAPI, Leptos, Django, TailwindCSS)
     - Project tools (e.g., yarn, poetry, cargo)
   - List prerequisites for:
     - Local development (languages, build tools, containers, test tools, OS)
     - Deployment (if relevant)

5. **Architecture:**
   - Diagram: how services/modules interact.
   - For each subproject/service/module:
     - Describe high-level architecture.
     - List major components and their purposes.
     - Describe data model.
     - Include valid Mermaid diagrams (no rendering errors).
   - List tools for metrics, logs, and security analysis.

6. **Development Principles:**  
   - Outline global concerns: code quality, security, linters/formatters, test coverage, documentation.
   - If concerns are specific, describe in relevant section.
